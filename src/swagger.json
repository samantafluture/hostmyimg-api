{
    "openapi": "3.0.0",
    "info": {
        "title": "HostMyImg API",
        "description": "API for hosting imagens (.png, .jpg, .gif) online",
        "termsOfService": "http://localhost:3000/terms",
        "version": "1.0.0",
        "contact": {
            "email": "samantafluture@gmail.com"
        }
    },
    "servers": [
        {
            "url": "https://hostmyimg-api.herokuapp.com"
        }
    ],
    "tags": [
        {
            "name": "posts",
            "description": "Operations based on posts"
        },
        {
            "name": "users",
            "description": "Operations based on users"
        },
        {
            "name": "auth",
            "description": "Operations based on authentication"
        }
    ],
    "paths": {
        "/users/free": {
            "get": {
                "tags": ["users"],
                "summary": "List all users with no authentication",
                "description": "Get all users without needing the authentication token",
                "operationId": "getAllUsers",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": ["users"],
                "summary": "List all users",
                "description": "Get all users created through the singup route",
                "operationId": "getAllUsers",
                "produces": ["application/json"],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/users/{_id}": {
            "get": {
                "tags": ["users"],
                "summary": "List user by ID",
                "description": "Get all data from a user while passing its ID by params",
                "operationId": "getUserById",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            },
            "delete": {
                "tags": ["users"],
                "summary": "Delete user by ID",
                "description": "Remove all data from a user while passing its ID by params",
                "operationId": "deleteUser",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Not Authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/users/{_id}/posts": {
            "get": {
                "tags": ["users"],
                "summary": "List posts by user",
                "description": "Get all posts from a user while passing the user ID by params",
                "operationId": "getPostsByUser",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "tags": ["auth"],
                "summary": "Signup user",
                "description": "Create a new user while veryfing duplicated email or username. Required fields: username, email and password.",
                "operationId": "signup",
                "produces": ["application/json"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignUp"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed! Username or Email is already in use!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["auth"],
                "summary": "Login user",
                "description": "Loing user and get a JWT token if credentials are valid. Required fields: username and password.",
                "operationId": "signup",
                "produces": ["application/json"],
                "security": [{ "bearerAuth": [] }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed! Username or Email is already in use!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/posts/free": {
            "get": {
                "tags": ["posts"],
                "summary": "List all posts with no authentication",
                "description": "Get all posts without needing the authentication token",
                "operationId": "getAllPosts",
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            },
            "post": {
                "tags": ["posts"],
                "summary": "Upload file without authentication",
                "description": "Upload file or mutiple files at once. Accepted formats: .jpg, .gif or .png",
                "operationId": "createPost",
                "requestBody": {
                    "content": {
                        "image/png": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/jpg": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/gif": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/posts/free/{_id}": {
            "delete": {
                "tags": ["posts"],
                "summary": "Delete post by ID without authentication",
                "description": "Remove all data from a post while passing its ID by params",
                "operationId": "deletePost",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Post ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "tags": ["posts"],
                "summary": "List all posts",
                "description": "Get all posts while authenticated",
                "operationId": "getAllPosts",
                "produces": ["application/json"],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            },
            "post": {
                "tags": ["posts"],
                "summary": "Upload file",
                "description": "Upload file or mutiple files at once while logged in. Accepted formats: .jpg, .gif or .png",
                "operationId": "createPost",
                "security": [{ "bearerAuth": [] }],
                "requestBody": {
                    "content": {
                        "image/png": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/jpg": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/gif": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not Authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/posts/{_id}": {
            "get": {
                "tags": ["posts"],
                "summary": "List post by ID",
                "description": "Get all data from a POST while passing its ID by params",
                "operationId": "getPostById",
                "produces": ["application/json"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Post ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            },
            "post": {
                "tags": ["posts"],
                "summary": "Upload file while logged in",
                "description": "Upload file or mutiple files at once while passing a user ID by params. Accepted formats: .jpg, .gif or .png",
                "operationId": "createPostLoggedIn",
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "image/png": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/jpg": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "image/gif": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Post"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not Authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            },
            "delete": {
                "tags": ["posts"],
                "summary": "Delete post by ID",
                "description": "Remove all data from a post while passing its ID by params",
                "operationId": "deletePost",
                "produces": ["application/json"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Post ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        },
        "/posts/{_id}/users": {
            "get": {
                "tags": ["posts"],
                "summary": "List user by post",
                "description": "Get all data from a user while passing the post ID by params",
                "operationId": "getUserByPost",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Post ID",
                        "required": true
                    }
                ],
                "security": [{ "bearerAuth": [] }],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized!"
                    },
                    "500": {
                        "description": "Internal Error Server"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "createAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "posts": {
                        "type": "array",
                        "items": {
                            "_id": {
                                "type": "string"
                            }
                        }
                    },
                    "_v": {
                        "type": "integer"
                    }
                }
            },
            "Post": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "size": {
                        "type": "number"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user": {
                        "type": "string"
                    },
                    "_v": {
                        "type": "integer"
                    }
                }
            },
            "SignUp": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "Login": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "Token": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                }
            },
            "File": {
                "type": "string",
                "format": "binary"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "x-access-token"
            }
        }
    }
}
